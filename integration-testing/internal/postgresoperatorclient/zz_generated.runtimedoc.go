/*
Package postgresoperatorclient GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package postgresoperatorclient

func (v *BaseURL) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.BaseURLParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *BaseURLParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CancelRestoreRequest) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.CancelRestoreRequestParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CancelRestoreRequestParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Client) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Endpoint":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CreateArchive) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.CreateArchiveParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CreateArchiveParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CurrentRestoreRequest) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.CurrentRestoreRequestParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CurrentRestoreRequestParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CurrentUserInfo) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.CurrentUserInfoParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *CurrentUserInfoParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *DeleteArchive) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.DeleteArchiveParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *DeleteArchiveParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		case "ArchiveCode":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *ExchangeToken) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.ExchangeTokenParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ExchangeTokenParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		case "RequestBody":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *ExportArchiveAsTar) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.ExportArchiveAsTarParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ExportArchiveAsTarParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		case "ArchiveCode":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *ImportArchiveFromTar) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.ImportArchiveFromTarParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ImportArchiveFromTarParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		case "ArchiveCode":
			return []string{}, true
		case "RequestBody":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *JWKs) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ListArchive) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.ListArchiveParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ListArchiveParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Liveness) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Readiness) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}

		return nil, false
	}
	return []string{}, true
}

func (v *RequestRestoreArchive) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.RequestRestoreArchiveParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *RequestRestoreArchiveParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		case "ArchiveCode":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *Restart) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		}
		if doc, ok := runtimeDoc(&v.RestartParameters, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *RestartParameters) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Authorization":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
