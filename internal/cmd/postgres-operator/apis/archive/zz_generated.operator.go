/*
Package archive GENERATED BY gengo:operator
DON'T EDIT THIS FILE
*/
package archive

import (
	archivev1 "github.com/innoai-tech/postgres-operator/pkg/apis/archive/v1"
	courier "github.com/octohelm/courier/pkg/courier"
	statuserror "github.com/octohelm/courier/pkg/statuserror"
)

func init() {
	R.Register(courier.NewRouter(&CancelRestoreRequest{}))
}

func (CancelRestoreRequest) ResponseContent() any {
	return nil
}

func (CancelRestoreRequest) ResponseData() *courier.NoContent {
	return new(courier.NoContent)
}

func init() {
	R.Register(courier.NewRouter(&CreateArchive{}))
}

func (CreateArchive) ResponseContent() any {
	return new(archivev1.Archive)
}

func (CreateArchive) ResponseData() *archivev1.Archive {
	return new(archivev1.Archive)
}

func init() {
	R.Register(courier.NewRouter(&CurrentRestoreRequest{}))
}

func (CurrentRestoreRequest) ResponseContent() any {
	return new(archivev1.Archive)
}

func (CurrentRestoreRequest) ResponseData() *archivev1.Archive {
	return new(archivev1.Archive)
}

func (CurrentRestoreRequest) ResponseErrors() []error {
	return []error{
		&statuserror.Descriptor{
			Code:    statuserror.ErrCodeFor[archivev1.ErrArchiveNotFound](),
			Message: "archive not found",
			Status:  404,
		},
	}
}

func init() {
	R.Register(courier.NewRouter(&DeleteArchive{}))
}

func (DeleteArchive) ResponseContent() any {
	return nil
}

func (DeleteArchive) ResponseData() *courier.NoContent {
	return new(courier.NoContent)
}

func init() {
	R.Register(courier.NewRouter(&ExportArchiveAsTar{}))
}

func (ExportArchiveAsTar) ResponseContent() any {
	return nil
}

func (ExportArchiveAsTar) ResponseData() *courier.NoContent {
	return new(courier.NoContent)
}

func (ExportArchiveAsTar) ResponseErrors() []error {
	return []error{
		&statuserror.Descriptor{
			Code:    statuserror.ErrCodeFor[archivev1.ErrArchiveNotFound](),
			Message: "archive not found",
			Status:  404,
		},
	}
}

func init() {
	R.Register(courier.NewRouter(&ImportArchiveFromTar{}))
}

func (ImportArchiveFromTar) ResponseContent() any {
	return nil
}

func (ImportArchiveFromTar) ResponseData() *courier.NoContent {
	return new(courier.NoContent)
}

func init() {
	R.Register(courier.NewRouter(&ListArchive{}))
}

func (ListArchive) ResponseContent() any {
	return new(archivev1.ArchiveList)
}

func (ListArchive) ResponseData() *archivev1.ArchiveList {
	return new(archivev1.ArchiveList)
}

func init() {
	R.Register(courier.NewRouter(&RequestRestoreArchive{}))
}

func (RequestRestoreArchive) ResponseContent() any {
	return nil
}

func (RequestRestoreArchive) ResponseData() *courier.NoContent {
	return new(courier.NoContent)
}
