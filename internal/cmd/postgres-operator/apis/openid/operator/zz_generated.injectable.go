/*
Package operator GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package operator

import (
	context "context"
	fmt "fmt"

	auth "github.com/innoai-tech/postgres-operator/internal/cmd/postgres-operator/domain/auth"
	courierhttp "github.com/octohelm/courier/pkg/courierhttp"
)

type contextBaseURL struct{}

func BaseURLFromContext(ctx context.Context) (*BaseURL, bool) {
	if v, ok := ctx.Value(contextBaseURL{}).(*BaseURL); ok {
		return v, true
	}
	return nil, false
}

func BaseURLInjectContext(ctx context.Context, tpe *BaseURL) context.Context {
	return context.WithValue(ctx, contextBaseURL{}, tpe)
}

func (p *BaseURL) InjectContext(ctx context.Context) context.Context {
	return BaseURLInjectContext(ctx, p)
}

func (v *BaseURL) Init(ctx context.Context) error {
	if value, ok := courierhttp.RequestFromContext(ctx); ok {
		v.httpRequest = value
	} else {
		return fmt.Errorf("missing provider %T.httpRequest", v)
	}

	if value, ok := auth.ServiceFromContext(ctx); ok {
		v.as = value
	} else {
		return fmt.Errorf("missing provider %T.as", v)
	}

	return nil
}

type contextValidAccount struct{}

func ValidAccountFromContext(ctx context.Context) (*ValidAccount, bool) {
	if v, ok := ctx.Value(contextValidAccount{}).(*ValidAccount); ok {
		return v, true
	}
	return nil, false
}

func ValidAccountInjectContext(ctx context.Context, tpe *ValidAccount) context.Context {
	return context.WithValue(ctx, contextValidAccount{}, tpe)
}

func (p *ValidAccount) InjectContext(ctx context.Context) context.Context {
	return ValidAccountInjectContext(ctx, p)
}

func (v *ValidAccount) Init(ctx context.Context) error {
	if value, ok := courierhttp.RequestFromContext(ctx); ok {
		v.httpRequest = value
	} else {
		return fmt.Errorf("missing provider %T.httpRequest", v)
	}

	if value, ok := auth.ServiceFromContext(ctx); ok {
		v.as = value
	} else {
		return fmt.Errorf("missing provider %T.as", v)
	}

	return nil
}
