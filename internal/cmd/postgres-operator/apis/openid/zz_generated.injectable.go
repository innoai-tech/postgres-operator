/*
Package openid GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package openid

import (
	context "context"
	fmt "fmt"

	auth "github.com/innoai-tech/postgres-operator/internal/cmd/postgres-operator/domain/auth"
	courierhttp "github.com/octohelm/courier/pkg/courierhttp"
	jwk "github.com/octohelm/jwx/pkg/jwk"
)

func (v *CurrentUserInfo) Init(ctx context.Context) error {
	if value, ok := courierhttp.RequestFromContext(ctx); ok {
		v.httpRequest = value
	} else {
		return fmt.Errorf("missing provider %T.httpRequest", v)
	}

	if value, ok := auth.ServiceFromContext(ctx); ok {
		v.as = value
	} else {
		return fmt.Errorf("missing provider %T.as", v)
	}

	return nil
}

func (v *ExchangeToken) Init(ctx context.Context) error {
	if value, ok := auth.ServiceFromContext(ctx); ok {
		v.as = value
	} else {
		return fmt.Errorf("missing provider %T.as", v)
	}

	return nil
}

func (v *JWKs) Init(ctx context.Context) error {
	if value, ok := jwk.KeySetProviderFromContext(ctx); ok {
		v.keySetProvider = value
	} else {
		return fmt.Errorf("missing provider %T.keySetProvider", v)
	}

	return nil
}
