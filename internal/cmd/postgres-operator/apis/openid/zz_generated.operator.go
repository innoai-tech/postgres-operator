/*
Package openid GENERATED BY gengo:operator
DON'T EDIT THIS FILE
*/
package openid

import (
	courier "github.com/octohelm/courier/pkg/courier"
	statuserror "github.com/octohelm/courier/pkg/statuserror"
	openidv1 "github.com/octohelm/jwx/pkg/apis/openid/v1"
)

func init() {
	R.Register(courier.NewRouter(&CurrentUserInfo{}))
}

func (CurrentUserInfo) ResponseContent() any {
	return new(openidv1.UserInfo)
}

func (CurrentUserInfo) ResponseData() *openidv1.UserInfo {
	return new(openidv1.UserInfo)
}

func init() {
	R.Register(courier.NewRouter(&ExchangeToken{}))
}

func (ExchangeToken) ResponseContent() any {
	return new(openidv1.Token)
}

func (ExchangeToken) ResponseData() *openidv1.Token {
	return new(openidv1.Token)
}

func (ExchangeToken) ResponseErrors() []error {
	return []error{
		&statuserror.Descriptor{
			Code:    statuserror.ErrCodeFor[openidv1.ErrInvalidUserOrPassword](),
			Message: "用户名或密码错误",
			Status:  403,
		},
		&statuserror.Descriptor{
			Code:    statuserror.ErrCodeFor[openidv1.ErrUnsupportedGrantType](),
			Message: "不支持的 OAuth 授权类型 {GrantType}",
			Status:  403,
		},
	}
}

func init() {
	R.Register(courier.NewRouter(&JWKs{}))
}

func (JWKs) ResponseContent() any {
	return new(openidv1.Jwks)
}

func (JWKs) ResponseData() *openidv1.Jwks {
	return new(openidv1.Jwks)
}
