/*
Package status GENERATED BY gengo:operator
DON'T EDIT THIS FILE
*/
package status

import (
	openmetrics "github.com/innoai-tech/postgres-operator/pkg/openmetrics"
	pgctl "github.com/innoai-tech/postgres-operator/pkg/pgctl"
	courier "github.com/octohelm/courier/pkg/courier"
	statuserror "github.com/octohelm/courier/pkg/statuserror"
)

func init() {
	R.Register(courier.NewRouter(&Liveness{}))
}

func (Liveness) ResponseContent() any {
	return new(map[string]any)
}

func (Liveness) ResponseData() *map[string]any {
	return new(map[string]any)
}

func (Liveness) ResponseErrors() []error {
	return []error{
		&statuserror.Descriptor{
			Code:    statuserror.ErrCodeFor[pgctl.ErrPostgresNotReady](),
			Message: "postgres is not ready: {Reason}",
			Status:  424,
		},
	}
}

func init() {
	R.Register(courier.NewRouter(&Metrics{}))
}

func (Metrics) ResponseContent() any {
	return new(openmetrics.MetricFamilySet)
}

func (Metrics) ResponseData() *openmetrics.MetricFamilySet {
	return new(openmetrics.MetricFamilySet)
}

func (Metrics) ResponseErrors() []error {
	return []error{
		&statuserror.Descriptor{
			Code:    statuserror.ErrCodeFor[pgctl.ErrPostgresNotReady](),
			Message: "postgres is not ready: {Reason}",
			Status:  424,
		},
	}
}

func init() {
	R.Register(courier.NewRouter(&Readiness{}))
}

func (Readiness) ResponseContent() any {
	return new(map[string]any)
}

func (Readiness) ResponseData() *map[string]any {
	return new(map[string]any)
}

func (Readiness) ResponseErrors() []error {
	return []error{
		&statuserror.Descriptor{
			Code:    statuserror.ErrCodeFor[pgctl.ErrPostgresNotReady](),
			Message: "postgres is not ready: {Reason}",
			Status:  424,
		},
	}
}
