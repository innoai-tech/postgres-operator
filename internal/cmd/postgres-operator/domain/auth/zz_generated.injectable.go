/*
Package auth GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package auth

import (
	context "context"
	fmt "fmt"

	pgctl "github.com/innoai-tech/postgres-operator/pkg/pgctl"
	sign "github.com/octohelm/jwx/pkg/sign"
)

type contextService struct{}

func ServiceFromContext(ctx context.Context) (*Service, bool) {
	if v, ok := ctx.Value(contextService{}).(*Service); ok {
		return v, true
	}
	return nil, false
}

func ServiceInjectContext(ctx context.Context, tpe *Service) context.Context {
	return context.WithValue(ctx, contextService{}, tpe)
}

func (p *Service) InjectContext(ctx context.Context) context.Context {
	return ServiceInjectContext(ctx, p)
}

func (v *Service) Init(ctx context.Context) error {
	if value, ok := pgctl.ControllerFromContext(ctx); ok {
		v.pgctl = value
	} else {
		return fmt.Errorf("missing provider %T.pgctl", v)
	}

	if value, ok := sign.SignerFromContext(ctx); ok {
		v.signer = value
	} else {
		return fmt.Errorf("missing provider %T.signer", v)
	}

	return nil
}
