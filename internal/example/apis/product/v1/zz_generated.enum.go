/*
Package v1 GENERATED BY gengo:enum
DON'T EDIT THIS FILE
*/
package v1

import (
	bytes "bytes"
	driver "database/sql/driver"
	errors "errors"
	fmt "fmt"

	enumeration "github.com/octohelm/enumeration/pkg/enumeration"
	pkgscanner "github.com/octohelm/enumeration/pkg/scanner"
)

var InvalidProductState = errors.New("invalid ProductState")

func (ProductState) EnumValues() []any {
	return []any{
		PRODUCT_STATE__ON_SALE, PRODUCT_STATE__OFF_SALE,
	}
}

func (v ProductState) MarshalText() ([]byte, error) {
	return []byte(v.String()), nil
}

func (v *ProductState) UnmarshalText(data []byte) error {
	vv, err := ParseProductStateFromString(string(bytes.ToUpper(data)))
	if err != nil {
		return err
	}
	*v = vv
	return nil
}

func ParseProductStateFromString(s string) (ProductState, error) {
	switch s {
	case "ON_SALE":
		return PRODUCT_STATE__ON_SALE, nil
	case "OFF_SALE":
		return PRODUCT_STATE__OFF_SALE, nil

	default:
		var i ProductState
		_, err := fmt.Sscanf(s, "UNKNOWN_%d", &i)
		if err == nil {
			return i, nil
		}
		return PRODUCT_STATE_UNKNOWN, InvalidProductState
	}
}

func (v ProductState) IsZero() bool {
	return v == PRODUCT_STATE_UNKNOWN
}

func (v ProductState) String() string {
	switch v {
	case PRODUCT_STATE__ON_SALE:
		return "ON_SALE"
	case PRODUCT_STATE__OFF_SALE:
		return "OFF_SALE"

	case PRODUCT_STATE_UNKNOWN:
		return "UNKNOWN"
	default:
		return fmt.Sprintf("UNKNOWN_%d", v)
	}
}

func ParseProductStateLabelString(label string) (ProductState, error) {
	switch label {
	case "上架":
		return PRODUCT_STATE__ON_SALE, nil
	case "下架":
		return PRODUCT_STATE__OFF_SALE, nil

	default:
		return PRODUCT_STATE_UNKNOWN, InvalidProductState
	}
}

func (v ProductState) Label() string {
	switch v {
	case PRODUCT_STATE__ON_SALE:
		return "上架"
	case PRODUCT_STATE__OFF_SALE:
		return "下架"

	default:
		return fmt.Sprint(v)
	}
}

func (v ProductState) Value() (driver.Value, error) {
	offset := 0
	if o, ok := any(v).(enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}
	return int64(v) + int64(offset), nil
}

func (v *ProductState) Scan(src any) error {
	offset := 0
	if o, ok := any(v).(enumeration.DriverValueOffset); ok {
		offset = o.Offset()
	}

	i, err := pkgscanner.ScanIntEnumStringer(src, offset)
	if err != nil {
		return err
	}
	*v = ProductState(i)
	return nil
}
