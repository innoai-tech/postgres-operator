/*
Package v1 GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package v1

func (v *Column) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.TypeMeta, "", names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(&v.Codable, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*ColumnCode) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *ColumnSpec) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Type":
			return []string{}, true
		}

		return nil, false
	}
	return []string{}, true
}

func (v *Constraint) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.TypeMeta, "", names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(&v.Codable, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*ConstraintCode) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *ConstraintColumn) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Options":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.Codable, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ConstraintSpec) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Columns":
			return []string{}, true
		case "Method":
			return []string{}, true
		case "Unique":
			return []string{}, true
		case "Primary":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *Database) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		}
		if doc, ok := runtimeDoc(&v.TypeMeta, "", names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(&v.Codable, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*DatabaseCode) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *DatabaseSpec) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "CharacterType":
			return []string{}, true
		case "Collation":
			return []string{}, true
		case "CollationVersion":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *Result) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Columns":
			return []string{}, true
		case "Data":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(&v.TypeMeta, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (v *ResultColumn) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Code":
			return []string{}, true
		case "Type":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (v *Table) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Spec":
			return []string{}, true
		case "Database":
			return []string{}, true

		}
		if doc, ok := runtimeDoc(&v.TypeMeta, "", names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(&v.Codable, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*TableCode) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *TableSpec) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Columns":
			return []string{}, true
		case "Constraints":
			return []string{}, true

		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
