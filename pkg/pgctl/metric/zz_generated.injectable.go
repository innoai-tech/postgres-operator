/*
Package metric GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package metric

import (
	context "context"
	fmt "fmt"

	pgctl "github.com/innoai-tech/postgres-operator/pkg/pgctl"
)

type contextExporter struct{}

func ExporterFromContext(ctx context.Context) (*Exporter, bool) {
	if v, ok := ctx.Value(contextExporter{}).(*Exporter); ok {
		return v, true
	}
	return nil, false
}

func ExporterInjectContext(ctx context.Context, tpe *Exporter) context.Context {
	return context.WithValue(ctx, contextExporter{}, tpe)
}

func (p *Exporter) InjectContext(ctx context.Context) context.Context {
	return ExporterInjectContext(ctx, p)
}

func (v *Exporter) Init(ctx context.Context) error {
	if err := v.afterInit(ctx); err != nil {
		return err
	}

	return nil
}

func (v *Metric) Init(ctx context.Context) error {
	if value, ok := pgctl.ControllerFromContext(ctx); ok {
		v.c = value
	} else {
		return fmt.Errorf("missing provider %T.c", v)
	}

	if err := v.afterInit(ctx); err != nil {
		return err
	}

	return nil
}
