/*
Package pgconf GENERATED BY gengo:runtimedoc
DON'T EDIT THIS FILE
*/
package pgconf

func (*ApplicationType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *Conf) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "DataDir":
			return []string{
				"db data-dir",
			}, true
		}
		if doc, ok := runtimeDoc(&v.Database, "", names...); ok {
			return doc, ok
		}
		if doc, ok := runtimeDoc(&v.Setting, "", names...); ok {
			return doc, ok
		}

		return nil, false
	}
	return []string{}, true
}

func (*DataDir) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *Database) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "Name":
			return []string{
				"db name",
			}, true
		case "User":
			return []string{
				"db user",
			}, true
		case "Password":
			return []string{
				"db password",
			}, true
		case "Port":
			return []string{
				"db listen port",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

func (*DiskType) RuntimeDoc(names ...string) ([]string, bool) {
	return []string{}, true
}

func (v *Setting) RuntimeDoc(names ...string) ([]string, bool) {
	if len(names) > 0 {
		switch names[0] {
		case "CPU":
			return []string{
				"db cpu requests",
			}, true
		case "MEM":
			return []string{
				"db mem requests",
			}, true
		case "MaxConnections":
			return []string{
				"db max connections",
			}, true
		case "ApplicationType":
			return []string{
				"db which application",
			}, true
		case "DiskType":
			return []string{
				"disk type",
			}, true

		}

		return nil, false
	}
	return []string{}, true
}

// nolint:deadcode,unused
func runtimeDoc(v any, prefix string, names ...string) ([]string, bool) {
	if c, ok := v.(interface {
		RuntimeDoc(names ...string) ([]string, bool)
	}); ok {
		doc, ok := c.RuntimeDoc(names...)
		if ok {
			if prefix != "" && len(doc) > 0 {
				doc[0] = prefix + doc[0]
				return doc, true
			}

			return doc, true
		}
	}
	return nil, false
}
