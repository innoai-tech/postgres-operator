/*
Package pgctl GENERATED BY gengo:injectable
DON'T EDIT THIS FILE
*/
package pgctl

import (
	context "context"
	fmt "fmt"
)

type contextController struct{}

func ControllerFromContext(ctx context.Context) (*Controller, bool) {
	if v, ok := ctx.Value(contextController{}).(*Controller); ok {
		return v, true
	}
	return nil, false
}

func ControllerInjectContext(ctx context.Context, tpe *Controller) context.Context {
	return context.WithValue(ctx, contextController{}, tpe)
}

func (p *Controller) InjectContext(ctx context.Context) context.Context {
	return ControllerInjectContext(ctx, p)
}

func (v *Controller) Init(ctx context.Context) error {
	return nil
}

func (v *Daemon) Init(ctx context.Context) error {
	if value, ok := ControllerFromContext(ctx); ok {
		v.c = value
	} else {
		return fmt.Errorf("missing provider %T.c", v)
	}

	if err := v.afterInit(ctx); err != nil {
		return err
	}

	return nil
}
